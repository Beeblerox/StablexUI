/**
@manual Meta tags in xml

There can be some tags in xml wich don't represent widgets. These are meta tags.
Their names must start with 'meta:' followed by the name of meta tag processor.
Meta processors are callbacks created to process specified meta tags and inject some
code in generated by StablexUI code.
*/


/**
@manual Meta: include

meta:include is used to include xml files in each other.
Let's say we have index.xml:

<xml>
<?xml version="1.0" encoding="UTF-8"?>

<Widget w="800" h="600"/>
    <!-- here goes meta -->
    <|meta:include src="someOther.xml" />
</Widget>
</xml>

and someOther.xml:

<xml>
<?xml version="1.0" encoding="UTF-8"?>

<Text text="'i am included!'" left="100" top="50"/>
</xml>

Using these two files is equal to using single file like this:

<xml>
<?xml version="1.0" encoding="UTF-8"?>

<Widget w="800" h="600"/>
    <Text text="'i am included!'" left="100" top="50"/>
</Widget>
</xml>

meta:include is useful if you need to reuse same parts for different UIs. It's also useful
if you want to divide one large xml file into several smaller to make it easier to maintain.
*/


/**
@manual Meta: inject

meta:inject is useful when you need to insert some custom haxe code:

<xml>
<?xml version="1.0" encoding="UTF-8"?>

<VBox w="800" h="600"/>
    <!-- here goes inject. E.g. you can define some vars here -->
    <|meta:inject code="
        var createdAt = $Lib.getTimer();
    " />

    <!-- now you can use this var -->
    <Button text="'Calculate life time!" on-click="
        #Text(label).text = 'I am ' + ($Lib.getTimer() - createdAt) + 'ms old';
    "/>
    <Text id="'label'" text="'I am ' + ($Lib.getTimer() - createdAt) + 'ms old'" />

</VBox>
</xml>

HINT:
It sounds strange, but sometimes flash and html5 targets does not call setters/getters
for properties of objects passed as arguments to <type>ru.stablex.ui.UIBuilder</type>.buildFn('ui.xml')({arguments}).
To workaround this problem, you need to explicity specify object's type. See following example:

<haxe>
class Test{
    //property with getter/setter
    public var intProp (get_intProp,never) : Int;
    private var _intProp : Int = 10;

    /**
    *   getter for intProp
    */
    private function get_intProp() : Int{
        return this._intProp;
    }

    //... rest of Test class ...


    /**
    *   Entry point
    */
    static public function main(){
        ru.stablex.ui.UIBuilder.UIBuilder.regClass('Test');
        nme.Lib.current.addChild( ru.stablex.ui.UIBuilder.buildFn('ui.xml')({
            test : new Test()
        }) );
    }
}//class Test
</haxe>

<xml>
<?xml version="1.0" encoding="UTF-8"?>

<Widget w="800" h="600">
    <!-- this is warkaround for html5 and flash -->
    <|meta:inject code="var test : $Test = cast(@test, $Test);"/>

    <!-- this button is expected to trace "10", but it will output "0" in flash -->
    <Button text="'fail trace'" on-click=" trace(@test.intProp); "/>

    <!-- this button traces "10" on all targets -->
    <Button text="'success trace'" on-click=" trace(test.intProp); "/>
</Widget>

</xml>

*/


/**
@manual Custom meta tags

You can define your own meta tags and create meta processors to affect StablexUI code generation flow.
Let's define meta tag wich will add specified amount of children for any widget this tag is attached to.
Here is how to create meta processor:
1. Define macro function, wich will create meta processors;
2. Call that function once before any UIBuilder.buildFn();

<haxe>
/**
* It's better to create separate class for this purpose to avoid a lot of errors
* and #if macro <...> #end usage
*/
@:macro class Macro {

    /**
    * Call this method before any UIBuilder.buildFn() calls
    *
    */
    static public function createMetas() : haxe.macro.Expr {
        //create meta for `createChildren`
        ru.stablex.ui.UIBuilder.meta.set('createChildren', function(node:<type>Xml</type>, parentWidget:<type>String</type>) : <type>String</type>{
            //how many children need to create?
            var amount = node.get('amount');
            //create code for that
            var code = 'for(i in 0...' + amount + '){ ' + parentWidget + '.addChild(new nme.display.Sprite()) ;}';

            return code;
        });

        return haxe.macro.Context.makeExpr(Void, haxe.macro.Context.currentPos());
    }//function createMetas()
}//class Macro
</haxe>

And

<haxe>
    //initialize StablexUI
    ru.stablex.ui.UIBuilder.init();

    //create custom metas
    Macro.createMetas();

    //create UI
    nme.Lib.current.addChild( ru.stablex.ui.UIBuilder.buildFn('ui.xml')() );
</haxe>

Now you can use it in ui.xml:

<xml>
<?xml version="1.0" encoding="UTF-8"?>

<Widget w="800" h="600"/>
    <!-- create 100 children for this widget -->
    <|meta:createChildren amount="100" />
</Widget>
</xml>

*/